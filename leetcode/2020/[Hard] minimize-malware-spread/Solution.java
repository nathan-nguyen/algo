class Solution {
    public int minMalwareSpread(int[][] gr, int[] init) {
        int n = gr.length;
        List<List<Integer>> g = new ArrayList<>();
        for (int i = 0; i < n; ++i) g.add(new ArrayList<>());

        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (gr[i][j] == 1) {
                    g.get(i).add(j);
                    g.get(j).add(i);
                }
            }
        }

        int[] group = new int[n];
        int[] count = new int[n+1];
        for (int i = 0; i < n; ++i) count[i + 1] = dfs(i, g, group, i + 1);

        Map<Integer, Integer> map = new HashMap<>();
        for (int k: init) {
            map.put(group[k], map.getOrDefault(group[k], 0) + 1);
        }

        int min = -1;
        int minValue = Integer.MAX_VALUE;
        for (int k: init) {
            minValue = Math.min(minValue, k);
            if (map.get(group[k]) != 1) continue;
            if (min == -1 || count[group[k]] > count[group[min]]) min = k;
            else if (count[group[k]] == count[group[min]]) min = Math.min(min, k);
        }
        return (min == -1 ? minValue : min);
    }

    private int dfs(int i, List<List<Integer>> g, int[] group, int mark) {
        if(group[i] > 0) return 0;
        group[i] = mark;
        int total = 1;
        for (int k: g.get(i)) total += dfs(k, g, group, mark);
        return total;
    }
}

