#*******************************************************************************
# SORTING ARRAY
#*******************************************************************************

(*) Classical way

Arrays.sort(points, new Comparator<int[]>(){
	@Override public int compare(int[] o1, int[] o2) {
		return Integer.compare(o1[0], o2[0]);
	}
});

(*) In Java 8

Integer[] a = new Integer[100];
int[] condition = new int[100];
Arrays.sort(a, (x, y) -> Integer.compare(condition[x], condition[y]));

(*) Primitive type cannot be sorted this way, need to convert to Object

int[][] a = new int[100][2];
Arrays.sort(a, (x, y) -> Integer.compare(x[0], y[0]));
Arrays.sort(a, (x, y) -> (x[0] == y[0]) ? Integer.compare(x[1], y[1]) : Integer.compare(x[0], y[0]));

#*******************************************************************************
# HASHMAP
#*******************************************************************************

HashSet<Integer> keySet = hashMap.keySet();

#*******************************************************************************
# BINARY SEARCH
#*******************************************************************************

public int binarySearch(int[] A, int target) {
	int low = 0, high = A.length-1;
	while(low <= high){
		int mid = (low+high) / 2;
		if (A[mid] == target) return mid;
		else if(A[mid] > target) high = mid - 1;
		else low = mid + 1;
	}
	return low;
}

(*) Binary search can be implemented by using 2 variable left and right where left <= target and right strictly > target

public int binarySearch(int[] a, int target) {
	int left = 0, right = a.length;
	while (left + 1 < right) {
		int mid = (left + right) / 2;
		if (a[mid] > target) right = mid;
		else left = mid;
	}
	return left;	// Result return maximum possible index
}

(*) Or left strictly < target and right >= target

public iny binarySearch(int[] a, int target) {
        int left = -1, right = a.length - 1;
        while (left + 1 < right) {
                int mid = (left + right) / 2;
                if (a[mid] < target) left = mid;
                else right = mid;
        }
        return right;    // Result return minimum possible index
}

#*******************************************************************************
# PRIORITY QUEUE
#*******************************************************************************

PriorityQueue<Integer> pq = new PriorityQueue<>();
for (int i = 0; i < nums.length; ++i){
	pq.offer(nums[i]);
	if (pq.size() > k) pq.poll();
}
return pq.peek();

#*******************************************************************************
# REGEX
#*******************************************************************************

(*) String - REGEX match

int matches = (password.matches(".*[0-9].*")? 0 : 1) + (password.matches(".*[a-z].*") ? 0 : 1) + (password.matches(".*[A-Z].*") ? 0 : 1) + (password.matches(".*[!@#$%^&*()-+].*") ? 0 : 1);

#*******************************************************************************
# STREAM
#*******************************************************************************

ArrayList<Integer> result = new ArrayList<>();
int[] resultArray = result.stream().mapToInt(i->i).toArray();

#*******************************************************************************
# ARRAYS
#*******************************************************************************

Arrays.copyOfRange

#*******************************************************************************
# LINKEDLIST
#*******************************************************************************

ListNode cur = head;
ListNode next = head;

while(next != null && next.next != null){
	cur = cur.next;
	next = next.next.next;
}

// 2: 0-1-null		-> 0-0|1-null
// 3: 0-1-2-null	-> 0-0|1-2
// 4: 0-1-2-3-null	-> 0-0|1-2|2-null

#*******************************************************************************
# BIT MANIPULATION
#*******************************************************************************

(*) Flip bit at poition k

n ^ (1 << k)

#*******************************************************************************
# SEGMENT TREE
#*******************************************************************************

(*) For each type of segment tree, override function method and set OUT_RANGE_VALUE value

abstract class SegmentTree {
	int st[]; //Array to store segment tree
	int OUT_RANGE_VALUE = Integer.MAX_VALUE;	// Min
	int OUT_RANGE_VALUE = Integer.MIN_VALUE;	// Max
	int OUT_RANGE_VALUE = 0;			// Sum
 
	abstract int function(int x, int y);
	int function(int x, int y) {return (x < y) ? x : y;}	// Min
	int function(int x, int y) {return (x > y) ? x : y;}	// Max
	int function(int x, int y) {return x + y;}		// Sum
 
	int getMid(int s, int e) {
		return s + (e - s) / 2;
	}


	// ss - se - index 
	int queryHelper(int ss, int se, int qs, int qe, int index) {
		if (qs <= ss && qe >= se) return st[index]; 
		if (se < qs || ss > qe) return OUT_RANGE_VALUE;
 
		int mid = getMid(ss, se);
		return function(queryHelper(ss, mid, qs, qe, 2 * index + 1), queryHelper(mid + 1, se, qs, qe, 2 * index + 2));
	}
 
	int query(int n, int qs, int qe) {
		if (qs < 0 || qe > n - 1 || qs > qe) {
			System.out.println("Invalid Input");
			return -1;
		}
 
		return queryHelper(0, n - 1, qs, qe, 0);
	}

	int updateHelper(int ss, int se, int si, int i, int newVal) {
		if (i < ss || i > se) return st[si];
 
		if (se != ss) {
			int mid = getMid(ss, se);
			st[si] = function(updateHelper(ss, mid, 2 * si + 1, i, newVal), updateHelper(mid + 1, se, 2 * si + 2, i, newVal));
		}
		else st[si] = newVal;
		return st[si];
	}
 
	void update(int arr[], int n, int i, int newVal){
		if (i < 0 || i > n - 1) {
			System.out.println("Invalid Input");
			return;
		}
 
 		arr[i] = newVal;
		updateHelper(0, n - 1, 0, i, newVal);
	}
 
	int constructHelper(int arr[], int ss, int se, int si){
		if (ss == se) {
			st[si] = arr[ss];
			return arr[ss];
		}
 
		int mid = getMid(ss, se);
		st[si] = function(constructHelper(arr, ss, mid, si * 2 + 1), constructHelper(arr, mid + 1, se, si * 2 + 2));
		return st[si];
	}
 
	SegmentTree(int arr[], int n) {
		int x = (int) (Math.ceil(Math.log(n) / Math.log(2)));
 
		int max_size = 2 * (int) Math.pow(2, x) - 1;
		st = new int[max_size]; // Allocate memory
 
		constructHelper(arr, 0, n - 1, 0);
	}
}

#*******************************************************************************
# GET ALL PERMUTATION
#*******************************************************************************

private List<String> permutation(List<String> ol) {
    List<String> result = new ArrayList<>();
    if (ol.size() == 0) {
        result.add("");
        return result;
    }   

    for (int i = 0; i < ol.size(); ++i) {
        List<String> nl = new ArrayList<>();
        for (int j = 0; j < ol.size(); ++j) {
            if (i == j) continue;
            else nl.add(ol.get(j));
        }   
        List<String> al = permutation(nl);
        for (String s: al) result.add(ol.get(i) + s); 
    }   
    return result;
}

#*******************************************************************************
# OTHERS
#*******************************************************************************

(*) The following algorithms / data structure should be included here but they are easy to implement, it is better to remember how to do implementation.
(*) Union Find
(*) Fenwick Tree
(*) Tries

#*******************************************************************************
#
#*******************************************************************************
